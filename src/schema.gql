# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type discipline {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime!
  name: String!
  students(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 10}

    """Specify to filter the records returned."""
    filter: StudentFilter = {}

    """Specify to sort results."""
    sorting: [StudentSort!] = []
  ): DisciplineStudentsConnection
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input OffsetPaging {
  """Limit the number of records returned"""
  limit: Int

  """Offset to start returning records from"""
  offset: Int
}

input StudentFilter {
  and: [StudentFilter!]
  or: [StudentFilter!]
  createdAt: DateFieldComparison
  name: StringFieldComparison
  key: StringFieldComparison
  disciplines: StudentFilterdisciplineFilter
}

input DateFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: DateTime
  neq: DateTime
  gt: DateTime
  gte: DateTime
  lt: DateTime
  lte: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  between: DateFieldComparisonBetween
  notBetween: DateFieldComparisonBetween
}

input DateFieldComparisonBetween {
  lower: DateTime!
  upper: DateTime!
}

input StringFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: String
  neq: String
  gt: String
  gte: String
  lt: String
  lte: String
  like: String
  notLike: String
  iLike: String
  notILike: String
  in: [String!]
  notIn: [String!]
}

input StudentFilterdisciplineFilter {
  and: [StudentFilterdisciplineFilter!]
  or: [StudentFilterdisciplineFilter!]
  createdAt: DateFieldComparison
  name: StringFieldComparison
}

input StudentSort {
  field: StudentSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum StudentSortFields {
  createdAt
  name
  key
}

"""Sort Directions"""
enum SortDirection {
  ASC
  DESC
}

"""Sort Nulls Options"""
enum SortNulls {
  NULLS_FIRST
  NULLS_LAST
}

type Student {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime!
  name: String!
  key: String!
  disciplines(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 10}

    """Specify to filter the records returned."""
    filter: disciplineFilter = {}

    """Specify to sort results."""
    sorting: [disciplineSort!] = []
  ): StudentDisciplinesConnection
}

input disciplineFilter {
  and: [disciplineFilter!]
  or: [disciplineFilter!]
  createdAt: DateFieldComparison
  name: StringFieldComparison
  students: disciplineFilterStudentFilter
}

input disciplineFilterStudentFilter {
  and: [disciplineFilterStudentFilter!]
  or: [disciplineFilterStudentFilter!]
  createdAt: DateFieldComparison
  name: StringFieldComparison
  key: StringFieldComparison
}

input disciplineSort {
  field: disciplineSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum disciplineSortFields {
  createdAt
  name
}

type DeleteManyResponse {
  """The number of records deleted."""
  deletedCount: Int!
}

type StudentDeleteResponse {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  name: String
  key: String
}

type UpdateManyResponse {
  """The number of records updated."""
  updatedCount: Int!
}

type OffsetPageInfo {
  """true if paging forward and there are more records."""
  hasNextPage: Boolean

  """true if paging backwards and there are more records."""
  hasPreviousPage: Boolean
}

type StudentConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [Student!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type StudentAggregateGroupBy {
  createdAt: DateTime
  name: String
  key: String
}

type StudentCountAggregate {
  createdAt: Int
  name: Int
  key: Int
}

type StudentMinAggregate {
  createdAt: DateTime
  name: String
  key: String
}

type StudentMaxAggregate {
  createdAt: DateTime
  name: String
  key: String
}

type StudentDisciplinesConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [discipline!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type DisciplineDeleteResponse {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  name: String
}

type DisciplineConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [discipline!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type disciplineAggregateGroupBy {
  createdAt: DateTime
  name: String
}

type disciplineCountAggregate {
  createdAt: Int
  name: Int
}

type disciplineMinAggregate {
  createdAt: DateTime
  name: String
}

type disciplineMaxAggregate {
  createdAt: DateTime
  name: String
}

type DisciplineStudentsConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [Student!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type Content {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime!
  description: String!
  linkContent: String
  lesson: lesson!
}

type lesson {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime!
  description: String
  contents(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 10}

    """Specify to filter the records returned."""
    filter: ContentFilter = {}

    """Specify to sort results."""
    sorting: [ContentSort!] = []
  ): LessonContentsConnection
}

input ContentFilter {
  and: [ContentFilter!]
  or: [ContentFilter!]
  createdAt: DateFieldComparison
  description: StringFieldComparison
  linkContent: StringFieldComparison
  lesson: ContentFilterlessonFilter
}

input ContentFilterlessonFilter {
  and: [ContentFilterlessonFilter!]
  or: [ContentFilterlessonFilter!]
  createdAt: DateFieldComparison
  description: StringFieldComparison
}

input ContentSort {
  field: ContentSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum ContentSortFields {
  createdAt
  description
  linkContent
}

type LessonDeleteResponse {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  description: String
}

type LessonConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [lesson!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type lessonAggregateGroupBy {
  createdAt: DateTime
  description: String
}

type lessonCountAggregate {
  createdAt: Int
  description: Int
}

type lessonMinAggregate {
  createdAt: DateTime
  description: String
}

type lessonMaxAggregate {
  createdAt: DateTime
  description: String
}

type LessonContentsConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [Content!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type ContentDeleteResponse {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  description: String
  linkContent: String
}

type ContentConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [Content!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type ContentAggregateGroupBy {
  createdAt: DateTime
  description: String
  linkContent: String
}

type ContentCountAggregate {
  createdAt: Int
  description: Int
  linkContent: Int
}

type ContentMinAggregate {
  createdAt: DateTime
  description: String
  linkContent: String
}

type ContentMaxAggregate {
  createdAt: DateTime
  description: String
  linkContent: String
}

type Query {
  student(
    """The id of the record to find."""
    id: ID!
  ): Student
  students(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 10}

    """Specify to filter the records returned."""
    filter: StudentFilter = {}

    """Specify to sort results."""
    sorting: [StudentSort!] = []
  ): StudentConnection!
  discipline(
    """The id of the record to find."""
    id: ID!
  ): discipline
  disciplines(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 10}

    """Specify to filter the records returned."""
    filter: disciplineFilter = {}

    """Specify to sort results."""
    sorting: [disciplineSort!] = []
  ): DisciplineConnection!
  lesson(
    """The id of the record to find."""
    id: ID!
  ): lesson
  lessons(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 10}

    """Specify to filter the records returned."""
    filter: lessonFilter = {}

    """Specify to sort results."""
    sorting: [lessonSort!] = []
  ): LessonConnection!
  content(
    """The id of the record to find."""
    id: ID!
  ): Content
  contents(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 10}

    """Specify to filter the records returned."""
    filter: ContentFilter = {}

    """Specify to sort results."""
    sorting: [ContentSort!] = []
  ): ContentConnection!
}

input lessonFilter {
  and: [lessonFilter!]
  or: [lessonFilter!]
  createdAt: DateFieldComparison
  description: StringFieldComparison
  Content: lessonFilterContentFilter
}

input lessonFilterContentFilter {
  and: [lessonFilterContentFilter!]
  or: [lessonFilterContentFilter!]
  createdAt: DateFieldComparison
  description: StringFieldComparison
  linkContent: StringFieldComparison
}

input lessonSort {
  field: lessonSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum lessonSortFields {
  createdAt
  description
}

type Mutation {
  addDisciplinesToStudent(input: AddDisciplinesToStudentInput!): Student!
  setDisciplinesOnStudent(input: SetDisciplinesOnStudentInput!): Student!
  removeDisciplinesFromStudent(input: RemoveDisciplinesFromStudentInput!): Student!
  createOneStudent(input: CreateOneStudentInput!): Student!
  createManyStudents(input: CreateManyStudentsInput!): [Student!]!
  updateOneStudent(input: UpdateOneStudentInput!): Student!
  updateManyStudents(input: UpdateManyStudentsInput!): UpdateManyResponse!
  deleteOneStudent(input: DeleteOneStudentInput!): StudentDeleteResponse!
  deleteManyStudents(input: DeleteManyStudentsInput!): DeleteManyResponse!
  addStudentsToDiscipline(input: AddStudentsToDisciplineInput!): discipline!
  setStudentsOnDiscipline(input: SetStudentsOnDisciplineInput!): discipline!
  removeStudentsFromDiscipline(input: RemoveStudentsFromDisciplineInput!): discipline!
  createOneDiscipline(input: CreateOneDisciplineInput!): discipline!
  createManyDisciplines(input: CreateManyDisciplinesInput!): [discipline!]!
  updateOneDiscipline(input: UpdateOneDisciplineInput!): discipline!
  updateManyDisciplines(input: UpdateManyDisciplinesInput!): UpdateManyResponse!
  deleteOneDiscipline(input: DeleteOneDisciplineInput!): DisciplineDeleteResponse!
  deleteManyDisciplines(input: DeleteManyDisciplinesInput!): DeleteManyResponse!
  addContentsToLesson(input: AddContentsToLessonInput!): lesson!
  setContentsOnLesson(input: SetContentsOnLessonInput!): lesson!
  removeContentsFromLesson(input: RemoveContentsFromLessonInput!): lesson!
  createOneLesson(input: CreateOneLessonInput!): lesson!
  createManyLessons(input: CreateManyLessonsInput!): [lesson!]!
  updateOneLesson(input: UpdateOneLessonInput!): lesson!
  updateManyLessons(input: UpdateManyLessonsInput!): UpdateManyResponse!
  deleteOneLesson(input: DeleteOneLessonInput!): LessonDeleteResponse!
  deleteManyLessons(input: DeleteManyLessonsInput!): DeleteManyResponse!
  setLessonOnContent(input: SetLessonOnContentInput!): Content!
  removeLessonFromContent(input: RemoveLessonFromContentInput!): Content!
  createOneContent(input: CreateOneContentInput!): Content!
  createManyContents(input: CreateManyContentsInput!): [Content!]!
  updateOneContent(input: UpdateOneContentInput!): Content!
  updateManyContents(input: UpdateManyContentsInput!): UpdateManyResponse!
  deleteOneContent(input: DeleteOneContentInput!): ContentDeleteResponse!
  deleteManyContents(input: DeleteManyContentsInput!): DeleteManyResponse!
}

input AddDisciplinesToStudentInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input SetDisciplinesOnStudentInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input RemoveDisciplinesFromStudentInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input CreateOneStudentInput {
  """The record to create"""
  student: CreateStudentInput!
}

input CreateStudentInput {
  name: String!
  key: String!
}

input CreateManyStudentsInput {
  """Array of records to create"""
  students: [CreateStudentInput!]!
}

input UpdateOneStudentInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateStudentInput!
}

input UpdateStudentInput {
  name: String
  key: String
}

input UpdateManyStudentsInput {
  """Filter used to find fields to update"""
  filter: StudentUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateStudentInput!
}

input StudentUpdateFilter {
  and: [StudentUpdateFilter!]
  or: [StudentUpdateFilter!]
  createdAt: DateFieldComparison
  name: StringFieldComparison
  key: StringFieldComparison
}

input DeleteOneStudentInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyStudentsInput {
  """Filter to find records to delete"""
  filter: StudentDeleteFilter!
}

input StudentDeleteFilter {
  and: [StudentDeleteFilter!]
  or: [StudentDeleteFilter!]
  createdAt: DateFieldComparison
  name: StringFieldComparison
  key: StringFieldComparison
}

input AddStudentsToDisciplineInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input SetStudentsOnDisciplineInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input RemoveStudentsFromDisciplineInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input CreateOneDisciplineInput {
  """The record to create"""
  discipline: CreateDisciplineInput!
}

input CreateDisciplineInput {
  name: String!
}

input CreateManyDisciplinesInput {
  """Array of records to create"""
  disciplines: [CreateDisciplineInput!]!
}

input UpdateOneDisciplineInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateDiciplineInput!
}

input UpdateDiciplineInput {
  name: String!
}

input UpdateManyDisciplinesInput {
  """Filter used to find fields to update"""
  filter: disciplineUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateDiciplineInput!
}

input disciplineUpdateFilter {
  and: [disciplineUpdateFilter!]
  or: [disciplineUpdateFilter!]
  createdAt: DateFieldComparison
  name: StringFieldComparison
}

input DeleteOneDisciplineInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyDisciplinesInput {
  """Filter to find records to delete"""
  filter: disciplineDeleteFilter!
}

input disciplineDeleteFilter {
  and: [disciplineDeleteFilter!]
  or: [disciplineDeleteFilter!]
  createdAt: DateFieldComparison
  name: StringFieldComparison
}

input AddContentsToLessonInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input SetContentsOnLessonInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input RemoveContentsFromLessonInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input CreateOneLessonInput {
  """The record to create"""
  lesson: CreateLessonInput!
}

input CreateLessonInput {
  description: String!
}

input CreateManyLessonsInput {
  """Array of records to create"""
  lessons: [CreateLessonInput!]!
}

input UpdateOneLessonInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateLessonInput!
}

input UpdateLessonInput {
  description: String
  id: ID
}

input UpdateManyLessonsInput {
  """Filter used to find fields to update"""
  filter: lessonUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateLessonInput!
}

input lessonUpdateFilter {
  and: [lessonUpdateFilter!]
  or: [lessonUpdateFilter!]
  createdAt: DateFieldComparison
  description: StringFieldComparison
}

input DeleteOneLessonInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyLessonsInput {
  """Filter to find records to delete"""
  filter: lessonDeleteFilter!
}

input lessonDeleteFilter {
  and: [lessonDeleteFilter!]
  or: [lessonDeleteFilter!]
  createdAt: DateFieldComparison
  description: StringFieldComparison
}

input SetLessonOnContentInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input RemoveLessonFromContentInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input CreateOneContentInput {
  """The record to create"""
  content: CreateContentInput!
}

input CreateContentInput {
  description: String!
  linkContent: String
  lesson: UpdateLessonInput
}

input CreateManyContentsInput {
  """Array of records to create"""
  contents: [CreateContentInput!]!
}

input UpdateOneContentInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateContentInput!
}

input UpdateContentInput {
  description: String
  linkContent: String
  lesson: UpdateLessonInput
  id: ID
}

input UpdateManyContentsInput {
  """Filter used to find fields to update"""
  filter: ContentUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateContentInput!
}

input ContentUpdateFilter {
  and: [ContentUpdateFilter!]
  or: [ContentUpdateFilter!]
  createdAt: DateFieldComparison
  description: StringFieldComparison
  linkContent: StringFieldComparison
}

input DeleteOneContentInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyContentsInput {
  """Filter to find records to delete"""
  filter: ContentDeleteFilter!
}

input ContentDeleteFilter {
  and: [ContentDeleteFilter!]
  or: [ContentDeleteFilter!]
  createdAt: DateFieldComparison
  description: StringFieldComparison
  linkContent: StringFieldComparison
}